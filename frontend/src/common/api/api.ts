/* tslint:disable */
/* eslint-disable */
/**
 * GigaChat.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AIContent
 */
export interface AIContent {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AIContent
     */
    'additionalProperties'?: { [key: string]: any; } | null;
}
/**
 * 
 * @export
 * @interface ChatApiMessage
 */
export interface ChatApiMessage {
    /**
     * 
     * @type {string}
     * @memberof ChatApiMessage
     */
    'role'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatApiMessage
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface ChatFinishReason
 */
export interface ChatFinishReason {
    /**
     * 
     * @type {string}
     * @memberof ChatFinishReason
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    'authorName'?: string | null;
    /**
     * 
     * @type {ChatRole}
     * @memberof ChatMessage
     */
    'role'?: ChatRole;
    /**
     * 
     * @type {Array<AIContent>}
     * @memberof ChatMessage
     */
    'contents'?: Array<AIContent> | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ChatMessage
     */
    'additionalProperties'?: { [key: string]: any; } | null;
}
/**
 * 
 * @export
 * @interface ChatResponse
 */
export interface ChatResponse {
    /**
     * 
     * @type {Array<ChatMessage>}
     * @memberof ChatResponse
     */
    'choices'?: Array<ChatMessage> | null;
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    'responseId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    'chatThreadId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    'modelId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {ChatFinishReason}
     * @memberof ChatResponse
     */
    'finishReason'?: ChatFinishReason;
    /**
     * 
     * @type {UsageDetails}
     * @memberof ChatResponse
     */
    'usage'?: UsageDetails;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ChatResponse
     */
    'additionalProperties'?: { [key: string]: any; } | null;
}
/**
 * 
 * @export
 * @interface ChatRole
 */
export interface ChatRole {
    /**
     * 
     * @type {string}
     * @memberof ChatRole
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface GetChatResponseQuery
 */
export interface GetChatResponseQuery {
    /**
     * 
     * @type {Array<ChatApiMessage>}
     * @memberof GetChatResponseQuery
     */
    'messages'?: Array<ChatApiMessage> | null;
}
/**
 * 
 * @export
 * @interface UsageDetails
 */
export interface UsageDetails {
    /**
     * 
     * @type {number}
     * @memberof UsageDetails
     */
    'inputTokenCount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsageDetails
     */
    'outputTokenCount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsageDetails
     */
    'totalTokenCount'?: number | null;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof UsageDetails
     */
    'additionalCounts'?: { [key: string]: number; } | null;
}

/**
 * GigaChatApiApi - axios parameter creator
 * @export
 */
export const GigaChatApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GetChatResponseQuery} getChatResponseQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChatPost: async (getChatResponseQuery: GetChatResponseQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getChatResponseQuery' is not null or undefined
            assertParamExists('apiChatPost', 'getChatResponseQuery', getChatResponseQuery)
            const localVarPath = `/api/chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getChatResponseQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GigaChatApiApi - functional programming interface
 * @export
 */
export const GigaChatApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GigaChatApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GetChatResponseQuery} getChatResponseQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChatPost(getChatResponseQuery: GetChatResponseQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChatPost(getChatResponseQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GigaChatApiApi.apiChatPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GigaChatApiApi - factory interface
 * @export
 */
export const GigaChatApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GigaChatApiApiFp(configuration)
    return {
        /**
         * 
         * @param {GetChatResponseQuery} getChatResponseQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChatPost(getChatResponseQuery: GetChatResponseQuery, options?: RawAxiosRequestConfig): AxiosPromise<ChatResponse> {
            return localVarFp.apiChatPost(getChatResponseQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GigaChatApiApi - object-oriented interface
 * @export
 * @class GigaChatApiApi
 * @extends {BaseAPI}
 */
export class GigaChatApiApi extends BaseAPI {
    /**
     * 
     * @param {GetChatResponseQuery} getChatResponseQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GigaChatApiApi
     */
    public apiChatPost(getChatResponseQuery: GetChatResponseQuery, options?: RawAxiosRequestConfig) {
        return GigaChatApiApiFp(this.configuration).apiChatPost(getChatResponseQuery, options).then((request) => request(this.axios, this.basePath));
    }
}



